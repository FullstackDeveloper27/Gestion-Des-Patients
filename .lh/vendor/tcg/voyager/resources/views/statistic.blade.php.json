{
    "sourceFile": "vendor/tcg/voyager/resources/views/statistic.blade.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1654258820498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1654258858349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n                         <label style=\"color: #000\">Sélectionner Table : *</label><br>\r\n                         <select name=\"created_at\" class=\"form-control\" style=\" height:35px\"\r\n                             id=\"id_table\" onchange=\"filtrer()\">\r\n                             @php\r\n-                                $tables = DB:SHOW TABLES FROM Tables_in_sql_tutorial\";\r\n+                                $tables = DB::SHOW TABLES FROM Tables_in_sql_tutorial\";\r\n                             @endphp\r\n                                 <option disabled selected>All</option>\r\n                                 @foreach($tables as $table)\r\n                                 <option value=\"{{ $table }}\">{{ $table->name }}</option>\r\n"
                },
                {
                    "date": 1654258876844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n                         <label style=\"color: #000\">Sélectionner Table : *</label><br>\r\n                         <select name=\"created_at\" class=\"form-control\" style=\" height:35px\"\r\n                             id=\"id_table\" onchange=\"filtrer()\">\r\n                             @php\r\n-                                $tables = DB::SHOW TABLES FROM Tables_in_sql_tutorial\";\r\n+                                $tables = seDB::SHOW TABLES FROM Tables_in_sql_tutorial\";\r\n                             @endphp\r\n                                 <option disabled selected>All</option>\r\n                                 @foreach($tables as $table)\r\n                                 <option value=\"{{ $table }}\">{{ $table->name }}</option>\r\n"
                }
            ],
            "date": 1654258820498,
            "name": "Commit-0",
            "content": "@extends('voyager::master')\r\n@section('content')\r\n    <div class=\"page-content\">\r\n        <body>\r\n            <center>\r\n                <h1>**Statistic** Gestion-Patients.com</h1>\r\n            </center>\r\n            <div class=\"col-md-12\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-6\">\r\n                        <label style=\"color: #000\">Sélectionner Table : *</label><br>\r\n                        <select name=\"created_at\" class=\"form-control\" style=\" height:35px\"\r\n                            id=\"id_table\" onchange=\"filtrer()\">\r\n                            @php\r\n                                $tables = \"SHOW TABLES FROM Tables_in_sql_tutorial\";\r\n                            @endphp\r\n                                <option disabled selected>All</option>\r\n                                @foreach($tables as $table)\r\n                                <option value=\"{{ $table }}\">{{ $table->name }}</option>\r\n                                @endforeach\r\n\r\n                        </select>\r\n                    </div>\r\n                    <div class=\"col-md-6\">\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n       </body>\r\n    </div>\r\n@endsection\r\n@section('javascript')\r\n<script src=\"https://code.highcharts.com/highcharts.js\"></script>\r\n<script type=\"text/javascript\">\r\n$(function){    \r\n    var data =  <?php echo json_encode($data)?>;\r\n    Highcharts.chart('container', {\r\n        title: {\r\n            text: 'New Patient Growth, 2019'\r\n        },\r\n        subtitle: {\r\n            text: 'Source: Tutsmake.com'\r\n        },\r\n         xAxis: {\r\n            categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\n        },\r\n        yAxis: {\r\n            title: {\r\n                text: 'Number of New Patients'\r\n            }\r\n        },\r\n        legend: {\r\n            layout: 'vertical',\r\n            align: 'right',\r\n            verticalAlign: 'middle'\r\n        },\r\n        plotOptions: {\r\n            series: {\r\n                allowPointSelect: true\r\n            }\r\n        },\r\n        series: [{\r\n            name: 'New Patients',\r\n            data: data\r\n        }],\r\n        responsive: {\r\n            rules: [{\r\n                condition: {\r\n                    maxWidth: 500\r\n                },\r\n                chartOptions: {\r\n                    legend: {\r\n                        layout: 'horizontal',\r\n                        align: 'center',\r\n                        verticalAlign: 'bottom'\r\n                    }\r\n                }\r\n            }]\r\n        }\r\n});\r\n};\r\n</script>\r\n\r\n    @if (isset($google_analytics_client_id) && !empty($google_analytics_client_id))\r\n        <script>\r\n            (function(w, d, s, g, js, fs) {\r\n                g = w.gapi || (w.gapi = {});\r\n                g.analytics = {\r\n                    q: [],\r\n                    ready: function(f) {\r\n                        this.q.push(f);\r\n                    }\r\n                };\r\n                js = d.createElement(s);\r\n                fs = d.getElementsByTagName(s)[0];\r\n                js.src = 'https://apis.google.com/js/platform.js';\r\n                fs.parentNode.insertBefore(js, fs);\r\n                js.onload = function() {\r\n                    g.load('analytics');\r\n                };\r\n            }(window, document, 'script'));\r\n        </script>\r\n\r\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/1.1.1/Chart.min.js\"></script>\r\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.2/moment.min.js\"></script>\r\n        <script>\r\n            // View Selector 2 JS\r\n            ! function(e) {\r\n                function t(r) {\r\n                    if (i[r]) return i[r].exports;\r\n                    var o = i[r] = {\r\n                        exports: {},\r\n                        id: r,\r\n                        loaded: !1\r\n                    };\r\n                    return e[r].call(o.exports, o, o.exports, t), o.loaded = !0, o.exports\r\n                }\r\n                var i = {};\r\n                return t.m = e, t.c = i, t.p = \"\", t(0)\r\n            }([function(e, t, i) {\r\n                \"use strict\";\r\n\r\n                function r(e) {\r\n                    return e && e.__esModule ? e : {\r\n                        \"default\": e\r\n                    }\r\n                }\r\n                var o = i(1),\r\n                    s = r(o);\r\n                gapi.analytics.ready(function() {\r\n                    function e(e, t, i) {\r\n                        e.innerHTML = t.map(function(e) {\r\n                            var t = e.id == i ? \"selected \" : \" \";\r\n                            return \"<option \" + t + 'value=\"' + e.id + '\">' + e.name + \"</option>\"\r\n                        }).join(\"\")\r\n                    }\r\n\r\n                    function t(e) {\r\n                        return e.ids || e.viewId ? {\r\n                            prop: \"viewId\",\r\n                            value: e.viewId || e.ids && e.ids.replace(/^ga:/, \"\")\r\n                        } : e.propertyId ? {\r\n                            prop: \"propertyId\",\r\n                            value: e.propertyId\r\n                        } : e.accountId ? {\r\n                            prop: \"accountId\",\r\n                            value: e.accountId\r\n                        } : void 0\r\n                    }\r\n                    gapi.analytics.createComponent(\"ViewSelector2\", {\r\n                        execute: function() {\r\n                            return this.setup_(function() {\r\n                                this.updateAccounts_(), this.changed_ && (this.render_(),\r\n                                    this.onChange_())\r\n                            }.bind(this)), this\r\n                        },\r\n                        set: function(e) {\r\n                            if (!!e.ids + !!e.viewId + !!e.propertyId + !!e.accountId > 1)\r\n                            throw new Error(\r\n                                    'You cannot specify more than one of the following options: \"ids\", \"viewId\", \"accountId\", \"propertyId\"'\r\n                                    );\r\n                            if (e.container && this.container) throw new Error(\r\n                                \"You cannot change containers once a view selector has been rendered on the page.\"\r\n                                );\r\n                            var t = this.get();\r\n                            return (t.ids != e.ids || t.viewId != e.viewId || t.propertyId != e\r\n                                    .propertyId || t.accountId != e.accountId) && (t.ids = null, t\r\n                                    .viewId = null, t.propertyId = null, t.accountId = null), gapi\r\n                                .analytics.Component.prototype.set.call(this, e)\r\n                        },\r\n                        setup_: function(e) {\r\n                            function t() {\r\n                                s[\"default\"].get().then(function(t) {\r\n                                    i.summaries = t, i.accounts = i.summaries.all(), e()\r\n                                }, function(e) {\r\n                                    i.emit(\"error\", e)\r\n                                })\r\n                            }\r\n                            var i = this;\r\n                            gapi.analytics.auth.isAuthorized() ? t() : gapi.analytics.auth.on(\r\n                                \"signIn\", t)\r\n                        },\r\n                        updateAccounts_: function() {\r\n                            var e = this.get(),\r\n                                i = t(e),\r\n                                r = void 0,\r\n                                o = void 0,\r\n                                s = void 0;\r\n                            if (!this.summaries.all().length) return this.emit(\"error\", new Error(\r\n                                'This user does not have any Google Analytics accounts. You can sign up at \"www.google.com/analytics\".'\r\n                                ));\r\n                            if (i) switch (i.prop) {\r\n                                case \"viewId\":\r\n                                    r = this.summaries.getProfile(i.value), o = this.summaries\r\n                                        .getAccountByProfileId(i.value), s = this.summaries\r\n                                        .getWebPropertyByProfileId(i.value);\r\n                                    break;\r\n                                case \"propertyId\":\r\n                                    s = this.summaries.getWebProperty(i.value), o = this\r\n                                        .summaries.getAccountByWebPropertyId(i.value), r = s &&\r\n                                        s.views && s.views[0];\r\n                                    break;\r\n                                case \"accountId\":\r\n                                    o = this.summaries.getAccount(i.value), s = o && o\r\n                                        .properties && o.properties[0], r = s && s.views && s\r\n                                        .views[0]\r\n                            } else o = this.accounts[0], s = o && o.properties && o.properties[\r\n                                0], r = s && s.views && s.views[0];\r\n                            o || s || r ? (o != this.account || s != this.property || r != this\r\n                                .view) && (this.changed_ = {\r\n                                    account: o && o != this.account,\r\n                                    property: s && s != this.property,\r\n                                    view: r && r != this.view\r\n                                }, this.account = o, this.properties = o.properties, this\r\n                                .property = s, this.views = s && s.views, this.view = r, this\r\n                                .ids = r && \"ga:\" + r.id) : this.emit(\"error\", new Error(\r\n                                \"This user does not have access to \" + i.prop.slice(0, -2) +\r\n                                \" : \" + i.value))\r\n                        },\r\n                        render_: function() {\r\n                            var t = this.get();\r\n                            this.container = \"string\" == typeof t.container ? document\r\n                                .getElementById(t.container) : t.container, this.container\r\n                                .innerHTML = t.template || this.template;\r\n                            var i = this.container.querySelectorAll(\"select\"),\r\n                                r = this.accounts,\r\n                                o = this.properties || [{\r\n                                    name: \"(Empty)\",\r\n                                    id: \"\"\r\n                                }],\r\n                                s = this.views || [{\r\n                                    name: \"(Empty)\",\r\n                                    id: \"\"\r\n                                }];\r\n                            e(i[0], r, this.account.id), e(i[1], o, this.property && this.property\r\n                                    .id), e(i[2], s, this.view && this.view.id), i[0].onchange =\r\n                                this.onUserSelect_.bind(this, i[0], \"accountId\"), i[1].onchange =\r\n                                this.onUserSelect_.bind(this, i[1], \"propertyId\"), i[2].onchange =\r\n                                this.onUserSelect_.bind(this, i[2], \"viewId\")\r\n                        },\r\n                        onChange_: function() {\r\n                            var e = {\r\n                                account: this.account,\r\n                                property: this.property,\r\n                                view: this.view,\r\n                                ids: this.view && \"ga:\" + this.view.id\r\n                            };\r\n                            this.changed_ && (this.changed_.account && this.emit(\"accountChange\",\r\n                                    e), this.changed_.property && this.emit(\"propertyChange\", e),\r\n                                    this.changed_.view && (this.emit(\"viewChange\", e), this.emit(\r\n                                        \"idsChange\", e), this.emit(\"change\", e.ids))), this\r\n                                .changed_ = null\r\n                        },\r\n                        onUserSelect_: function(e, t) {\r\n                            var i = {};\r\n                            i[t] = e.value, this.set(i), this.execute()\r\n                        },\r\n                        template: '<div class=\"ViewSelector2\">  <div class=\"ViewSelector2-item\">    <label>Account</label>    <select class=\"FormField\"></select>  </div>  <div class=\"ViewSelector2-item\">    <label>Property</label>    <select class=\"FormField\"></select>  </div>  <div class=\"ViewSelector2-item\">    <label>View</label>    <select class=\"FormField\"></select>  </div></div>'\r\n                    })\r\n                })\r\n            }, function(e, t, i) {\r\n                function r() {\r\n                    var e = gapi.client.request({\r\n                        path: n\r\n                    }).then(function(e) {\r\n                        return e\r\n                    });\r\n                    return new e.constructor(function(t, i) {\r\n                        var r = [];\r\n                        e.then(function o(e) {\r\n                            var c = e.result;\r\n                            c.items ? r = r.concat(c.items) : i(new Error(\r\n                                    \"You do not have any Google Analytics accounts. Go to http://google.com/analytics to sign up.\"\r\n                                    )), c.startIndex + c.itemsPerPage <= c.totalResults ? gapi.client\r\n                                .request({\r\n                                    path: n,\r\n                                    params: {\r\n                                        \"start-index\": c.startIndex + c.itemsPerPage\r\n                                    }\r\n                                }).then(o) : t(new s(r))\r\n                        }).then(null, i)\r\n                    })\r\n                }\r\n                var o, s = i(2),\r\n                    n = \"/analytics/v3/management/accountSummaries\";\r\n                e.exports = {\r\n                    get: function(e) {\r\n                        return e && (o = null), o || (o = r())\r\n                    }\r\n                }\r\n            }, function(e, t) {\r\n                function i(e) {\r\n                    this.accounts_ = e, this.webProperties_ = [], this.profiles_ = [], this.accountsById_ = {}, this\r\n                        .webPropertiesById_ = this.propertiesById_ = {}, this.profilesById_ = this.viewsById_ = {};\r\n                    for (var t, i = 0; t = this.accounts_[i]; i++)\r\n                        if (this.accountsById_[t.id] = {\r\n                                self: t\r\n                            }, t.webProperties) {\r\n                            r(t, \"webProperties\", \"properties\");\r\n                            for (var o, s = 0; o = t.webProperties[s]; s++)\r\n                                if (this.webProperties_.push(o), this.webPropertiesById_[o.id] = {\r\n                                        self: o,\r\n                                        parent: t\r\n                                    }, o.profiles) {\r\n                                    r(o, \"profiles\", \"views\");\r\n                                    for (var n, c = 0; n = o.profiles[c]; c++) this.profiles_.push(n), this\r\n                                        .profilesById_[n.id] = {\r\n                                            self: n,\r\n                                            parent: o,\r\n                                            grandParent: t\r\n                                        }\r\n                                }\r\n                        }\r\n                }\r\n\r\n                function r(e, t, i) {\r\n                    Object.defineProperty ? Object.defineProperty(e, i, {\r\n                        get: function() {\r\n                            return e[t]\r\n                        }\r\n                    }) : e[i] = e[t]\r\n                }\r\n                i.prototype.all = function() {\r\n                        return this.accounts_\r\n                    }, r(i.prototype, \"all\", \"allAccounts\"), i.prototype.allWebProperties = function() {\r\n                        return this.webProperties_\r\n                    }, r(i.prototype, \"allWebProperties\", \"allProperties\"), i.prototype.allProfiles = function() {\r\n                        return this.profiles_\r\n                    }, r(i.prototype, \"allProfiles\", \"allViews\"), i.prototype.get = function(e) {\r\n                        if (!!e.accountId + !!e.webPropertyId + !!e.propertyId + !!e.profileId + !!e.viewId > 1)\r\n                        throw new Error(\r\n                                'get() only accepts an object with a single property: either \"accountId\", \"webPropertyId\", \"propertyId\", \"profileId\" or \"viewId\"'\r\n                                );\r\n                        return this.getProfile(e.profileId || e.viewId) || this.getWebProperty(e.webPropertyId || e\r\n                            .propertyId) || this.getAccount(e.accountId)\r\n                    }, i.prototype.getAccount = function(e) {\r\n                        return this.accountsById_[e] && this.accountsById_[e].self\r\n                    }, i.prototype.getWebProperty = function(e) {\r\n                        return this.webPropertiesById_[e] && this.webPropertiesById_[e].self\r\n                    }, r(i.prototype, \"getWebProperty\", \"getProperty\"), i.prototype.getProfile = function(e) {\r\n                        return this.profilesById_[e] && this.profilesById_[e].self\r\n                    }, r(i.prototype, \"getProfile\", \"getView\"), i.prototype.getAccountByProfileId = function(e) {\r\n                        return this.profilesById_[e] && this.profilesById_[e].grandParent\r\n                    }, r(i.prototype, \"getAccountByProfileId\", \"getAccountByViewId\"), i.prototype\r\n                    .getWebPropertyByProfileId = function(e) {\r\n                        return this.profilesById_[e] && this.profilesById_[e].parent\r\n                    }, r(i.prototype, \"getWebPropertyByProfileId\", \"getPropertyByViewId\"), i.prototype\r\n                    .getAccountByWebPropertyId = function(e) {\r\n                        return this.webPropertiesById_[e] && this.webPropertiesById_[e].parent\r\n                    }, r(i.prototype, \"getAccountByWebPropertyId\", \"getAccountByPropertyId\"), e.exports = i\r\n            }]);\r\n            // DateRange Selector JS\r\n            ! function(t) {\r\n                function e(n) {\r\n                    if (a[n]) return a[n].exports;\r\n                    var i = a[n] = {\r\n                        exports: {},\r\n                        id: n,\r\n                        loaded: !1\r\n                    };\r\n                    return t[n].call(i.exports, i, i.exports, e), i.loaded = !0, i.exports\r\n                }\r\n                var a = {};\r\n                return e.m = t, e.c = a, e.p = \"\", e(0)\r\n            }([function(t, e) {\r\n                \"use strict\";\r\n                gapi.analytics.ready(function() {\r\n                    function t(t) {\r\n                        if (n.test(t)) return t;\r\n                        var i = a.exec(t);\r\n                        if (i) return e(+i[1]);\r\n                        if (\"today\" == t) return e(0);\r\n                        if (\"yesterday\" == t) return e(1);\r\n                        throw new Error(\"Cannot convert date \" + t)\r\n                    }\r\n\r\n                    function e(t) {\r\n                        var e = new Date;\r\n                        e.setDate(e.getDate() - t);\r\n                        var a = String(e.getMonth() + 1);\r\n                        a = 1 == a.length ? \"0\" + a : a;\r\n                        var n = String(e.getDate());\r\n                        return n = 1 == n.length ? \"0\" + n : n, e.getFullYear() + \"-\" + a + \"-\" + n\r\n                    }\r\n                    var a = /(\\d+)daysAgo/,\r\n                        n = /\\d{4}\\-\\d{2}\\-\\d{2}/;\r\n                    gapi.analytics.createComponent(\"DateRangeSelector\", {\r\n                        execute: function() {\r\n                            var e = this.get();\r\n                            e[\"start-date\"] = e[\"start-date\"] || \"7daysAgo\", e[\"end-date\"] = e[\r\n                                    \"end-date\"] || \"yesterday\", this.container = \"string\" ==\r\n                                typeof e.container ? document.getElementById(e.container) : e\r\n                                .container, e.template && (this.template = e.template), this\r\n                                .container.innerHTML = this.template;\r\n                            var a = this.container.querySelectorAll(\"input\");\r\n                            return this.startDateInput = a[0], this.startDateInput.value = t(e[\r\n                                    \"start-date\"]), this.endDateInput = a[1], this.endDateInput\r\n                                .value = t(e[\"end-date\"]), this.setValues(), this.setMinMax(), this\r\n                                .container.onchange = this.onChange.bind(this), this\r\n                        },\r\n                        onChange: function() {\r\n                            this.setValues(), this.setMinMax(), this.emit(\"change\", {\r\n                                \"start-date\": this[\"start-date\"],\r\n                                \"end-date\": this[\"end-date\"]\r\n                            })\r\n                        },\r\n                        setValues: function() {\r\n                            this[\"start-date\"] = this.startDateInput.value, this[\"end-date\"] = this\r\n                                .endDateInput.value\r\n                        },\r\n                        setMinMax: function() {\r\n                            this.startDateInput.max = this.endDateInput.value, this.endDateInput\r\n                                .min = this.startDateInput.value\r\n                        },\r\n                        template: '<div class=\"DateRangeSelector\">  <div class=\"DateRangeSelector-item\">    <label>Start Date</label>     <input type=\"date\">  </div>  <div class=\"DateRangeSelector-item\">    <label>End Date</label>     <input type=\"date\">  </div></div>'\r\n                    })\r\n                })\r\n            }]);\r\n            // Active Users JS\r\n            ! function(t) {\r\n                function i(s) {\r\n                    if (e[s]) return e[s].exports;\r\n                    var n = e[s] = {\r\n                        exports: {},\r\n                        id: s,\r\n                        loaded: !1\r\n                    };\r\n                    return t[s].call(n.exports, n, n.exports, i), n.loaded = !0, n.exports\r\n                }\r\n                var e = {};\r\n                return i.m = t, i.c = e, i.p = \"\", i(0)\r\n            }([function(t, i) {\r\n                \"use strict\";\r\n                gapi.analytics.ready(function() {\r\n                    gapi.analytics.createComponent(\"ActiveUsers\", {\r\n                        initialize: function() {\r\n                            this.activeUsers = 0, gapi.analytics.auth.once(\"signOut\", this\r\n                                .handleSignOut_.bind(this))\r\n                        },\r\n                        execute: function() {\r\n                            this.polling_ && this.stop(), this.render_(), gapi.analytics.auth\r\n                                .isAuthorized() ? this.pollActiveUsers_() : gapi.analytics.auth\r\n                                .once(\"signIn\", this.pollActiveUsers_.bind(this))\r\n                        },\r\n                        stop: function() {\r\n                            clearTimeout(this.timeout_), this.polling_ = !1, this.emit(\"stop\", {\r\n                                activeUsers: this.activeUsers\r\n                            })\r\n                        },\r\n                        render_: function() {\r\n                            var t = this.get();\r\n                            this.container = \"string\" == typeof t.container ? document\r\n                                .getElementById(t.container) : t.container, this.container\r\n                                .innerHTML = t.template || this.template, this.container\r\n                                .querySelector(\"b\").innerHTML = this.activeUsers\r\n                        },\r\n                        pollActiveUsers_: function() {\r\n                            var t = this.get(),\r\n                                i = 1e3 * (t.pollingInterval || 5);\r\n                            if (isNaN(i) || 5e3 > i) throw new Error(\r\n                                \"Frequency must be 5 seconds or more.\");\r\n                            this.polling_ = !0, gapi.client.analytics.data.realtime.get({\r\n                                ids: t.ids,\r\n                                metrics: \"rt:activeUsers\"\r\n                            }).then(function(t) {\r\n                                var e = t.result,\r\n                                    s = e.totalResults ? +e.rows[0][0] : 0,\r\n                                    n = this.activeUsers;\r\n                                this.emit(\"success\", {\r\n                                    activeUsers: this.activeUsers\r\n                                }), s != n && (this.activeUsers = s, this.onChange_(s -\r\n                                    n)), 1 == this.polling_ && (this.timeout_ =\r\n                                    setTimeout(this.pollActiveUsers_.bind(this), i))\r\n                            }.bind(this))\r\n                        },\r\n                        onChange_: function(t) {\r\n                            var i = this.container.querySelector(\"b\");\r\n                            i && (i.innerHTML = this.activeUsers), this.emit(\"change\", {\r\n                                activeUsers: this.activeUsers,\r\n                                delta: t\r\n                            }), t > 0 ? this.emit(\"increase\", {\r\n                                activeUsers: this.activeUsers,\r\n                                delta: t\r\n                            }) : this.emit(\"decrease\", {\r\n                                activeUsers: this.activeUsers,\r\n                                delta: t\r\n                            })\r\n                        },\r\n                        handleSignOut_: function() {\r\n                            this.stop(), gapi.analytics.auth.once(\"signIn\", this.handleSignIn_.bind(\r\n                                this))\r\n                        },\r\n                        handleSignIn_: function() {\r\n                            this.pollActiveUsers_(), gapi.analytics.auth.once(\"signOut\", this\r\n                                .handleSignOut_.bind(this))\r\n                        },\r\n                        template: '<div class=\"ActiveUsers\">Active Users: <b class=\"ActiveUsers-value\"></b></div>'\r\n                    })\r\n                })\r\n            }]);\r\n        </script>\r\n\r\n        <script>\r\n            // == NOTE ==\r\n            // This code uses ES6 promises. If you want to use this code in a browser\r\n            // that doesn't supporting promises natively, you'll have to include a polyfill.\r\n\r\n            gapi.analytics.ready(function() {\r\n\r\n                /**\r\n                 * Authorize the user immediately if the user has already granted access.\r\n                 * If no access has been created, render an authorize button inside the\r\n                 * element with the ID \"embed-api-auth-container\".\r\n                 */\r\n                gapi.analytics.auth.authorize({\r\n                    container: 'embed-api-auth-container',\r\n                    clientid: '{{ $google_analytics_client_id }}'\r\n                });\r\n\r\n\r\n                /**\r\n                 * Create a new ActiveUsers instance to be rendered inside of an\r\n                 * element with the id \"active-users-container\" and poll for changes every\r\n                 * five seconds.\r\n                 */\r\n                var activeUsers = new gapi.analytics.ext.ActiveUsers({\r\n                    container: 'active-users-container',\r\n                    pollingInterval: 5\r\n                });\r\n\r\n\r\n                /**\r\n                 * Add CSS animation to visually show the when users come and go.\r\n                 */\r\n                activeUsers.once('success', function() {\r\n                    var element = this.container.firstChild;\r\n                    var timeout;\r\n\r\n                    document.getElementById('embed-api-auth-container').style.display = 'none';\r\n                    document.getElementById('analytics-dashboard').style.display = 'block';\r\n\r\n                    this.on('change', function(data) {\r\n                        var element = this.container.firstChild;\r\n                        var animationClass = data.delta > 0 ? 'is-increasing' : 'is-decreasing';\r\n                        element.className += (' ' + animationClass);\r\n\r\n                        clearTimeout(timeout);\r\n                        timeout = setTimeout(function() {\r\n                            element.className =\r\n                                element.className.replace(/ is-(increasing|decreasing)/g, '');\r\n                        }, 3000);\r\n                    });\r\n                });\r\n\r\n\r\n                /**\r\n                 * Create a new ViewSelector2 instance to be rendered inside of an\r\n                 * element with the id \"view-selector-container\".\r\n                 */\r\n                var viewSelector = new gapi.analytics.ext.ViewSelector2({\r\n                        container: 'view-selector-container',\r\n                        propertyId: '{{ Voyager::setting('site.google_analytics_tracking_id') }}'\r\n                    })\r\n                    .execute();\r\n\r\n\r\n                /**\r\n                 * Update the activeUsers component, the Chartjs charts, and the dashboard\r\n                 * title whenever the user changes the view.\r\n                 */\r\n                viewSelector.on('viewChange', function(data) {\r\n                    var title = document.getElementById('view-name');\r\n                    if (title) {\r\n                        title.innerHTML = data.property.name + ' (' + data.view.name + ')';\r\n                    }\r\n\r\n                    // Start tracking active users for this view.\r\n                    activeUsers.set(data).execute();\r\n\r\n                    // Render all the of charts for this view.\r\n                    renderWeekOverWeekChart(data.ids);\r\n                    renderYearOverYearChart(data.ids);\r\n                    renderTopBrowsersChart(data.ids);\r\n                    renderTopCountriesChart(data.ids);\r\n                });\r\n\r\n\r\n                /**\r\n                 * Draw the a chart.js line chart with data from the specified view that\r\n                 * overlays session data for the current week over session data for the\r\n                 * previous week.\r\n                 */\r\n                function renderWeekOverWeekChart(ids) {\r\n\r\n                    // Adjust `now` to experiment with different days, for testing only...\r\n                    var now = moment(); // .subtract(3, 'day');\r\n\r\n                    var thisWeek = query({\r\n                        'ids': ids,\r\n                        'dimensions': 'ga:date,ga:nthDay',\r\n                        'metrics': 'ga:users',\r\n                        'start-date': moment(now).subtract(1, 'day').day(0).format('YYYY-MM-DD'),\r\n                        'end-date': moment(now).format('YYYY-MM-DD')\r\n                    });\r\n\r\n                    var lastWeek = query({\r\n                        'ids': ids,\r\n                        'dimensions': 'ga:date,ga:nthDay',\r\n                        'metrics': 'ga:users',\r\n                        'start-date': moment(now).subtract(1, 'day').day(0).subtract(1, 'week')\r\n                            .format('YYYY-MM-DD'),\r\n                        'end-date': moment(now).subtract(1, 'day').day(6).subtract(1, 'week')\r\n                            .format('YYYY-MM-DD')\r\n                    });\r\n\r\n                    Promise.all([thisWeek, lastWeek]).then(function(results) {\r\n\r\n                        var data1 = results[0].rows.map(function(row) {\r\n                            return +row[2];\r\n                        });\r\n                        var data2 = results[1].rows.map(function(row) {\r\n                            return +row[2];\r\n                        });\r\n                        var labels = results[1].rows.map(function(row) {\r\n                            return +row[0];\r\n                        });\r\n\r\n                        labels = labels.map(function(label) {\r\n                            return moment(label, 'YYYYMMDD').format('ddd');\r\n                        });\r\n\r\n                        var data = {\r\n                            labels: labels,\r\n                            datasets: [{\r\n                                    label: '{{ __('voyager::date.last_week') }}',\r\n                                    fillColor: 'rgba(220,220,220,0.5)',\r\n                                    strokeColor: 'rgba(220,220,220,1)',\r\n                                    pointColor: 'rgba(220,220,220,1)',\r\n                                    pointStrokeColor: '#fff',\r\n                                    data: data2\r\n                                },\r\n                                {\r\n                                    label: '{{ __('voyager::date.this_week') }}',\r\n                                    fillColor: 'rgba(151,187,205,0.5)',\r\n                                    strokeColor: 'rgba(151,187,205,1)',\r\n                                    pointColor: 'rgba(151,187,205,1)',\r\n                                    pointStrokeColor: '#fff',\r\n                                    data: data1\r\n                                }\r\n                            ]\r\n                        };\r\n\r\n                        new Chart(makeCanvas('chart-1-container')).Line(data);\r\n                        generateLegend('legend-1-container', data.datasets);\r\n                    });\r\n                }\r\n\r\n\r\n                /**\r\n                 * Draw the a chart.js bar chart with data from the specified view that\r\n                 * overlays session data for the current year over session data for the\r\n                 * previous year, grouped by month.\r\n                 */\r\n                function renderYearOverYearChart(ids) {\r\n\r\n                    // Adjust `now` to experiment with different days, for testing only...\r\n                    var now = moment(); // .subtract(3, 'day');\r\n\r\n                    var thisYear = query({\r\n                        'ids': ids,\r\n                        'dimensions': 'ga:month,ga:nthMonth',\r\n                        'metrics': 'ga:users',\r\n                        'start-date': moment(now).date(1).month(0).format('YYYY-MM-DD'),\r\n                        'end-date': moment(now).format('YYYY-MM-DD')\r\n                    });\r\n\r\n                    var lastYear = query({\r\n                        'ids': ids,\r\n                        'dimensions': 'ga:month,ga:nthMonth',\r\n                        'metrics': 'ga:users',\r\n                        'start-date': moment(now).subtract(1, 'year').date(1).month(0)\r\n                            .format('YYYY-MM-DD'),\r\n                        'end-date': moment(now).date(1).month(0).subtract(1, 'day')\r\n                            .format('YYYY-MM-DD')\r\n                    });\r\n\r\n                    Promise.all([thisYear, lastYear]).then(function(results) {\r\n                            var data1 = results[0].rows.map(function(row) {\r\n                                return +row[2];\r\n                            });\r\n                            var data2 = results[1].rows.map(function(row) {\r\n                                return +row[2];\r\n                            });\r\n                            var labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\r\n                                'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\r\n                            ];\r\n\r\n                            // Ensure the data arrays are at least as long as the labels array.\r\n                            // Chart.js bar charts don't (yet) accept sparse datasets.\r\n                            for (var i = 0, len = labels.length; i < len; i++) {\r\n                                if (data1[i] === undefined) data1[i] = null;\r\n                                if (data2[i] === undefined) data2[i] = null;\r\n                            }\r\n\r\n                            var data = {\r\n                                labels: labels,\r\n                                datasets: [{\r\n                                        label: '{{ __('voyager::date.last_year') }}',\r\n                                        fillColor: 'rgba(220,220,220,0.5)',\r\n                                        strokeColor: 'rgba(220,220,220,1)',\r\n                                        data: data2\r\n                                    },\r\n                                    {\r\n                                        label: '{{ __('voyager::date.this_year') }}',\r\n                                        fillColor: 'rgba(151,187,205,0.5)',\r\n                                        strokeColor: 'rgba(151,187,205,1)',\r\n                                        data: data1\r\n                                    }\r\n                                ]\r\n                            };\r\n\r\n                            new Chart(makeCanvas('chart-2-container')).Bar(data);\r\n                            generateLegend('legend-2-container', data.datasets);\r\n                        })\r\n                        .catch(function(err) {\r\n                            console.error(err.stack);\r\n                        });\r\n                }\r\n\r\n\r\n                /**\r\n                 * Draw the a chart.js doughnut chart with data from the specified view that\r\n                 * show the top 5 browsers over the past seven days.\r\n                 */\r\n                function renderTopBrowsersChart(ids) {\r\n\r\n                    query({\r\n                            'ids': ids,\r\n                            'dimensions': 'ga:browser',\r\n                            'metrics': 'ga:pageviews',\r\n                            'sort': '-ga:pageviews',\r\n                            'max-results': 5\r\n                        })\r\n                        .then(function(response) {\r\n\r\n                            var data = [];\r\n                            var colors = ['#4D5360', '#949FB1', '#D4CCC5', '#E2EAE9', '#F7464A'];\r\n\r\n                            response.rows.forEach(function(row, i) {\r\n                                data.push({\r\n                                    value: +row[1],\r\n                                    color: colors[i],\r\n                                    label: row[0]\r\n                                });\r\n                            });\r\n\r\n                            new Chart(makeCanvas('chart-3-container')).Doughnut(data);\r\n                            generateLegend('legend-3-container', data);\r\n                        });\r\n                }\r\n\r\n\r\n                /**\r\n                 * Draw the a chart.js doughnut chart with data from the specified view that\r\n                 * compares sessions from mobile, desktop, and tablet over the past seven\r\n                 * days.\r\n                 */\r\n                function renderTopCountriesChart(ids) {\r\n                    query({\r\n                            'ids': ids,\r\n                            'dimensions': 'ga:country',\r\n                            'metrics': 'ga:sessions',\r\n                            'sort': '-ga:sessions',\r\n                            'max-results': 5\r\n                        })\r\n                        .then(function(response) {\r\n\r\n                            var data = [];\r\n                            var colors = ['#4D5360', '#949FB1', '#D4CCC5', '#E2EAE9', '#F7464A'];\r\n\r\n                            response.rows.forEach(function(row, i) {\r\n                                data.push({\r\n                                    label: row[0],\r\n                                    value: +row[1],\r\n                                    color: colors[i]\r\n                                });\r\n                            });\r\n\r\n                            new Chart(makeCanvas('chart-4-container')).Doughnut(data);\r\n                            generateLegend('legend-4-container', data);\r\n                        });\r\n                }\r\n\r\n\r\n                /**\r\n                 * Extend the Embed APIs `gapi.analytics.report.Data` component to\r\n                 * return a promise the is fulfilled with the value returned by the API.\r\n                 * @param {Object} params The request parameters.\r\n                 * @return {Promise} A promise.\r\n                 */\r\n                function query(params) {\r\n                    return new Promise(function(resolve, reject) {\r\n                        var data = new gapi.analytics.report.Data({\r\n                            query: params\r\n                        });\r\n                        data.once('success', function(response) {\r\n                                resolve(response);\r\n                            })\r\n                            .once('error', function(response) {\r\n                                reject(response);\r\n                            })\r\n                            .execute();\r\n                    });\r\n                }\r\n\r\n\r\n                /**\r\n                 * Create a new canvas inside the specified element. Set it to be the width\r\n                 * and height of its container.\r\n                 * @param {string} id The id attribute of the element to host the canvas.\r\n                 * @return {RenderingContext} The 2D canvas context.\r\n                 */\r\n                function makeCanvas(id) {\r\n                    var container = document.getElementById(id);\r\n                    var canvas = document.createElement('canvas');\r\n                    var ctx = canvas.getContext('2d');\r\n\r\n                    container.innerHTML = '';\r\n                    canvas.width = container.offsetWidth;\r\n                    canvas.height = container.offsetHeight;\r\n                    container.appendChild(canvas);\r\n\r\n                    return ctx;\r\n                }\r\n\r\n\r\n                /**\r\n                 * Create a visual legend inside the specified element based off of a\r\n                 * Chart.js dataset.\r\n                 * @param {string} id The id attribute of the element to host the legend.\r\n                 * @param {Array.<Object>} items A list of labels and colors for the legend.\r\n                 */\r\n                function generateLegend(id, items) {\r\n                    var legend = document.getElementById(id);\r\n                    legend.innerHTML = items.map(function(item) {\r\n                        var color = item.color || item.fillColor;\r\n                        var label = item.label;\r\n                        return '<li><i style=\"background:' + color + '\"></i>' + label + '</li>';\r\n                    }).join('');\r\n                }\r\n\r\n\r\n                // Set some global Chart.js defaults.\r\n                Chart.defaults.global.animationSteps = 60;\r\n                Chart.defaults.global.animationEasing = 'easeInOutQuart';\r\n                Chart.defaults.global.responsive = true;\r\n                Chart.defaults.global.maintainAspectRatio = false;\r\n\r\n                // resize to redraw charts\r\n                window.dispatchEvent(new Event('resize'));\r\n\r\n            });\r\n        </script>\r\n    @endif\r\n    \r\n@stop\r\n"
        }
    ]
}